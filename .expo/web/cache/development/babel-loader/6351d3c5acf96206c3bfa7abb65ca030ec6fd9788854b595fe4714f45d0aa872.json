{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckboxItem = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\nvar _CheckboxAndroid = _interopRequireDefault(require(\"./CheckboxAndroid\"));\nvar _CheckboxIOS = _interopRequireDefault(require(\"./CheckboxIOS\"));\nvar _theming = require(\"../../core/theming\");\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\", \"labelMaxFontSizeMultiplier\"];\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar CheckboxItem = exports.CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    themeOverrides = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    disabled = _ref.disabled,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    _ref$labelMaxFontSize = _ref.labelMaxFontSizeMultiplier,\n    labelMaxFontSizeMultiplier = _ref$labelMaxFontSize === void 0 ? 1.5 : _ref$labelMaxFontSize,\n    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var checkboxProps = Object.assign({}, props, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);\n  } else {\n    checkbox = React.createElement(_Checkbox.default, checkboxProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(_TouchableRipple.default, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled,\n    theme: theme\n  }, React.createElement(_reactNative.View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(_Text.default, {\n    variant: labelVariant,\n    testID: `${testID}-text`,\n    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nvar _default = exports.default = CheckboxItem;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_Checkbox","_interopRequireDefault","_CheckboxAndroid","_CheckboxIOS","_theming","_TouchableRipple","_Text","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","CheckboxItem","exports","_ref","style","status","label","onPress","labelStyle","themeOverrides","theme","testID","mode","_ref$position","position","_ref$accessibilityLab","accessibilityLabel","disabled","_ref$labelVariant","labelVariant","_ref$labelMaxFontSize","labelMaxFontSizeMultiplier","props","_objectWithoutProperties2","useInternalTheme","checkboxProps","assign","isLeading","checkbox","createElement","CheckboxAndroid","CheckboxIOS","Checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","TouchableRipple","accessibilityRole","accessibilityState","checked","View","styles","container","pointerEvents","importantForAccessibility","Text","variant","maxFontSizeMultiplier","font","displayName","_default","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["C:\\Users\\kavinda\\Downloads\\gig\\Exercises_App-main\\node_modules\\react-native-paper\\src\\components\\Checkbox\\CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme: themeOverrides,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  labelMaxFontSizeMultiplier = 1.5,\n  ...props\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n      theme={theme}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          testID={`${testID}-text`}\n          maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default CheckboxItem;\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}