{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SegmentedButtons = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _SegmentedButtonItem = _interopRequireDefault(require(\"./SegmentedButtonItem\"));\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../core/theming\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar SegmentedButtons = exports.SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style,\n    themeOverrides = _ref.theme;\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  return React.createElement(_reactNative.View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat((0, _toConsumableArray2.default)(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n    return React.createElement(_SegmentedButtonItem.default, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      labelStyle: item.labelStyle,\n      theme: theme\n    }));\n  }));\n};\nvar styles = _reactNative.StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nvar _default = exports.default = SegmentedButtons;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_SegmentedButtonItem","_interopRequireDefault","_utils","_theming","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","SegmentedButtons","exports","_ref","value","onValueChange","buttons","multiSelect","density","style","themeOverrides","theme","useInternalTheme","createElement","View","styles","row","map","item","disabledChildStyle","getDisabledSegmentedButtonStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","_item$onPress","nextValue","filter","val","concat","_toConsumableArray2","SegmentedButtonItem","_extends","key","labelStyle","StyleSheet","create","flexDirection","_default"],"sources":["C:\\Users\\kavinda\\Downloads\\gig\\Exercises_App-main\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `checkedColor`: custom color for checked Text and Icon\n   * - `uncheckedColor`: custom color for unchecked Text and Icon\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    checkedColor?: string;\n    uncheckedColor?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    labelStyle?: StyleProp<TextStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n} & ConditionalValue;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n  theme: themeOverrides,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n            labelStyle={item.labelStyle}\n            theme={theme}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}